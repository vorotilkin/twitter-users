//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Follow = newFollowTable("public", "follow", "")

type followTable struct {
	postgres.Table

	// Columns
	UserID          postgres.ColumnInteger   // Идентификатор пользователя, который подписывается
	FollowingUserID postgres.ColumnInteger   // Идентификатор пользователя, на которого подписываются
	CreatedAt       postgres.ColumnTimestamp // Дата и время создания подписки

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FollowTable struct {
	followTable

	EXCLUDED followTable
}

// AS creates new FollowTable with assigned alias
func (a FollowTable) AS(alias string) *FollowTable {
	return newFollowTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FollowTable with assigned schema name
func (a FollowTable) FromSchema(schemaName string) *FollowTable {
	return newFollowTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FollowTable with assigned table prefix
func (a FollowTable) WithPrefix(prefix string) *FollowTable {
	return newFollowTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FollowTable with assigned table suffix
func (a FollowTable) WithSuffix(suffix string) *FollowTable {
	return newFollowTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFollowTable(schemaName, tableName, alias string) *FollowTable {
	return &FollowTable{
		followTable: newFollowTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newFollowTableImpl("", "excluded", ""),
	}
}

func newFollowTableImpl(schemaName, tableName, alias string) followTable {
	var (
		UserIDColumn          = postgres.IntegerColumn("user_id")
		FollowingUserIDColumn = postgres.IntegerColumn("following_user_id")
		CreatedAtColumn       = postgres.TimestampColumn("created_at")
		allColumns            = postgres.ColumnList{UserIDColumn, FollowingUserIDColumn, CreatedAtColumn}
		mutableColumns        = postgres.ColumnList{CreatedAtColumn}
	)

	return followTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:          UserIDColumn,
		FollowingUserID: FollowingUserIDColumn,
		CreatedAt:       CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
