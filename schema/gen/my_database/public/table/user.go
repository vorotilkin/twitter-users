//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var User = newUserTable("public", "user", "")

type userTable struct {
	postgres.Table

	// Columns
	ID              postgres.ColumnInteger
	Name            postgres.ColumnString
	PasswordHash    postgres.ColumnString
	Username        postgres.ColumnString
	Email           postgres.ColumnString
	CreatedAt       postgres.ColumnTimestamp
	UpdatedAt       postgres.ColumnTimestamp
	Bio             postgres.ColumnString
	EmailVerified   postgres.ColumnTimestamp
	Image           postgres.ColumnString
	CoverImage      postgres.ColumnString
	ProfileImage    postgres.ColumnString
	HasNotification postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserTable struct {
	userTable

	EXCLUDED userTable
}

// AS creates new UserTable with assigned alias
func (a UserTable) AS(alias string) *UserTable {
	return newUserTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserTable with assigned schema name
func (a UserTable) FromSchema(schemaName string) *UserTable {
	return newUserTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserTable with assigned table prefix
func (a UserTable) WithPrefix(prefix string) *UserTable {
	return newUserTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserTable with assigned table suffix
func (a UserTable) WithSuffix(suffix string) *UserTable {
	return newUserTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserTable(schemaName, tableName, alias string) *UserTable {
	return &UserTable{
		userTable: newUserTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newUserTableImpl("", "excluded", ""),
	}
}

func newUserTableImpl(schemaName, tableName, alias string) userTable {
	var (
		IDColumn              = postgres.IntegerColumn("id")
		NameColumn            = postgres.StringColumn("name")
		PasswordHashColumn    = postgres.StringColumn("password_hash")
		UsernameColumn        = postgres.StringColumn("username")
		EmailColumn           = postgres.StringColumn("email")
		CreatedAtColumn       = postgres.TimestampColumn("created_at")
		UpdatedAtColumn       = postgres.TimestampColumn("updated_at")
		BioColumn             = postgres.StringColumn("bio")
		EmailVerifiedColumn   = postgres.TimestampColumn("email_verified")
		ImageColumn           = postgres.StringColumn("image")
		CoverImageColumn      = postgres.StringColumn("cover_image")
		ProfileImageColumn    = postgres.StringColumn("profile_image")
		HasNotificationColumn = postgres.BoolColumn("has_notification")
		allColumns            = postgres.ColumnList{IDColumn, NameColumn, PasswordHashColumn, UsernameColumn, EmailColumn, CreatedAtColumn, UpdatedAtColumn, BioColumn, EmailVerifiedColumn, ImageColumn, CoverImageColumn, ProfileImageColumn, HasNotificationColumn}
		mutableColumns        = postgres.ColumnList{NameColumn, PasswordHashColumn, UsernameColumn, EmailColumn, CreatedAtColumn, UpdatedAtColumn, BioColumn, EmailVerifiedColumn, ImageColumn, CoverImageColumn, ProfileImageColumn, HasNotificationColumn}
	)

	return userTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		Name:            NameColumn,
		PasswordHash:    PasswordHashColumn,
		Username:        UsernameColumn,
		Email:           EmailColumn,
		CreatedAt:       CreatedAtColumn,
		UpdatedAt:       UpdatedAtColumn,
		Bio:             BioColumn,
		EmailVerified:   EmailVerifiedColumn,
		Image:           ImageColumn,
		CoverImage:      CoverImageColumn,
		ProfileImage:    ProfileImageColumn,
		HasNotification: HasNotificationColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
